import { describe, it, expect } from '@jest/globals';
import {
  sanitizeCVForSharing,
  generateShareURL,
  isValidShareToken,
  generateShareMetadata,
  isShareExpired,
  generateTimeLimitedShareToken,
  validateShareAccess,
  SharePermission,
  DEFAULT_SHARE_CONFIG,
} from '@/lib/utils/cv-sharing';
import {
  duplicateCVData,
  getDuplicationOptionsForStrategy,
  bulkDuplicateCV,
  duplicateForRole,
  validateDuplication,
  generateDuplicationSummary,
  DuplicationStrategy,
  DEFAULT_DUPLICATION_OPTIONS,
} from '@/lib/utils/cv-duplication';
import { createDefaultCVData } from '@/lib/cv';

describe('CV Sharing Utilities', () => {
  const mockCV = createDefaultCVData('Test CV');
  mockCV.contact = {
    name: 'John Doe',
    email: 'john@example.com',
    phone: '+1234567890',
    location: 'New York, NY',
    linkedin: 'https://linkedin.com/in/johndoe',
  };
  mockCV.summary = 'Experienced software engineer';
  mockCV.projects = [{
    name: 'Personal Project',
    description: 'A personal side project',
  }];
  mockCV.volunteerWork = [{
    organization: 'Local Charity',
    role: 'Volunteer',
    startDate: '2022-01-01',
    isPresent: true,
  }];
  mockCV.customSections = [{
    title: 'Custom Section',
    content: 'Custom content',
    type: 'text',
  }];

  describe('sanitizeCVForSharing', () => {
    it('should sanitize CV with default config', () => {
      const sanitized = sanitizeCVForSharing(mockCV);
      
      expect(sanitized.contact.name).toBe('John Doe');
      expect(sanitized.contact.email).toBe('john@example.com');
      expect(sanitized.projects).toHaveLength(1);
      expect(sanitized.volunteerWork).toHaveLength(1);
      expect(sanitized.customSections).toHaveLength(1);
    });

    it('should hide contact info when configured', () => {
      const config = {
        ...DEFAULT_SHARE_CONFIG,
        includeContactInfo: false,
      };
      
      const sanitized = sanitizeCVForSharing(mockCV, config);
      
      expect(sanitized.contact.name).toBe('John Doe');
      expect(sanitized.contact.email).toBe('[Email Hidden]');
      expect(sanitized.contact.phone).toBe('[Phone Hidden]');
    });

    it('should remove sections when configured', () => {
      const config = {
        includeContactInfo: true,
        includePersonalProjects: false,
        includeVolunteerWork: false,
        includeCustomSections: false,
      };
      
      const sanitized = sanitizeCVForSharing(mockCV, config);
      
      expect(sanitized.projects).toHaveLength(0);
      expect(sanitized.volunteerWork).toHaveLength(0);
      expect(sanitized.customSections).toHaveLength(0);
    });

    it('should add watermark when specified', () => {
      const config = {
        ...DEFAULT_SHARE_CONFIG,
        watermark: 'Generated by ATS Resume Builder',
      };
      
      const sanitized = sanitizeCVForSharing(mockCV, config);
      
      expect(sanitized.customSections).toHaveLength(2);
      expect(sanitized.customSections[1].title).toBe('Generated by');
      expect(sanitized.customSections[1].content).toBe('Generated by ATS Resume Builder');
    });
  });

  describe('generateShareURL', () => {
    it('should generate URL with default base', () => {
      const url = generateShareURL('abc123');
      expect(url).toContain('/cv/shared/abc123');
    });

    it('should generate URL with custom base', () => {
      const url = generateShareURL('abc123', 'https://custom.com');
      expect(url).toBe('https://custom.com/cv/shared/abc123');
    });
  });

  describe('isValidShareToken', () => {
    it('should validate correct tokens', () => {
      expect(isValidShareToken('abc123def456')).toBe(true);
      expect(isValidShareToken('1234567890')).toBe(true);
    });

    it('should reject invalid tokens', () => {
      expect(isValidShareToken('abc')).toBe(false); // Too short
      expect(isValidShareToken('abc-123')).toBe(false); // Contains hyphen
      expect(isValidShareToken('')).toBe(false); // Empty
    });
  });

  describe('generateShareMetadata', () => {
    it('should generate metadata for social sharing', () => {
      const cv = { name: 'Software Engineer Resume', data: mockCV };
      const shareUrl = 'https://example.com/cv/shared/abc123';
      
      const metadata = generateShareMetadata(cv, shareUrl);
      
      expect(metadata.title).toBe('Software Engineer Resume - John Doe');
      expect(metadata.description).toBe('Experienced software engineer');
      expect(metadata.url).toBe(shareUrl);
    });
  });

  describe('isShareExpired', () => {
    it('should detect expired shares by date', () => {
      const pastDate = new Date();
      pastDate.setHours(pastDate.getHours() - 1);
      
      const expiration = {
        expiresAt: pastDate,
        currentViews: 0,
      };
      
      expect(isShareExpired(expiration)).toBe(true);
    });

    it('should detect expired shares by view count', () => {
      const expiration = {
        maxViews: 10,
        currentViews: 10,
      };
      
      expect(isShareExpired(expiration)).toBe(true);
    });

    it('should not expire valid shares', () => {
      const futureDate = new Date();
      futureDate.setHours(futureDate.getHours() + 1);
      
      const expiration = {
        expiresAt: futureDate,
        maxViews: 10,
        currentViews: 5,
      };
      
      expect(isShareExpired(expiration)).toBe(false);
    });
  });

  describe('generateTimeLimitedShareToken', () => {
    it('should generate token with expiration', () => {
      const result = generateTimeLimitedShareToken(24);
      
      expect(result.token).toHaveLength(32);
      expect(result.expiresAt).toBeInstanceOf(Date);
      expect(result.expiresAt.getTime()).toBeGreaterThan(Date.now());
    });
  });

  describe('validateShareAccess', () => {
    const settings = {
      permissions: [SharePermission.VIEW_ONLY, SharePermission.DOWNLOAD_PDF],
      config: DEFAULT_SHARE_CONFIG,
      allowedDomains: ['company.com'],
      password: 'secret123',
    };

    it('should allow valid access', () => {
      const request = {
        permission: SharePermission.VIEW_ONLY,
        domain: 'user@company.com',
        password: 'secret123',
      };
      
      const result = validateShareAccess(settings, request);
      expect(result.allowed).toBe(true);
    });

    it('should deny invalid permission', () => {
      const request = {
        permission: SharePermission.CLONE,
        domain: 'user@company.com',
        password: 'secret123',
      };
      
      const result = validateShareAccess(settings, request);
      expect(result.allowed).toBe(false);
      expect(result.reason).toBe('Permission not granted');
    });

    it('should deny invalid domain', () => {
      const request = {
        permission: SharePermission.VIEW_ONLY,
        domain: 'user@external.com',
        password: 'secret123',
      };
      
      const result = validateShareAccess(settings, request);
      expect(result.allowed).toBe(false);
      expect(result.reason).toBe('Domain not allowed');
    });

    it('should deny invalid password', () => {
      const request = {
        permission: SharePermission.VIEW_ONLY,
        domain: 'user@company.com',
        password: 'wrong',
      };
      
      const result = validateShareAccess(settings, request);
      expect(result.allowed).toBe(false);
      expect(result.reason).toBe('Invalid password');
    });
  });
});

describe('CV Duplication Utilities', () => {
  const mockCV = createDefaultCVData('Original CV');
  mockCV.contact = {
    name: 'John Doe',
    email: 'john@example.com',
    phone: '+1234567890',
    location: 'New York, NY',
  };
  mockCV.experience = [{
    title: 'Software Engineer',
    company: 'Tech Corp',
    location: 'San Francisco, CA',
    startDate: '2022-01-01',
    endDate: '2023-12-31',
    isPresent: false,
    bullets: ['Developed applications'],
  }];
  mockCV.projects = [{
    name: 'Personal Project',
    description: 'A side project',
  }];
  mockCV.volunteerWork = [{
    organization: 'Local Charity',
    role: 'Volunteer',
    startDate: '2022-01-01',
    isPresent: true,
  }];

  describe('duplicateCVData', () => {
    it('should create exact copy with default options', () => {
      const duplicated = duplicateCVData(mockCV, 'Copy of Original CV');
      
      expect(duplicated.name).toBe('Copy of Original CV');
      expect(duplicated.contact.email).toBe('john@example.com');
      expect(duplicated.experience).toHaveLength(1);
      expect(duplicated.projects).toHaveLength(1);
      expect(duplicated.volunteerWork).toHaveLength(1);
      expect(duplicated.metadata?.version).toBe(1);
    });

    it('should remove sensitive data when configured', () => {
      const options = {
        ...DEFAULT_DUPLICATION_OPTIONS,
        includeSensitiveData: false,
      };
      
      const duplicated = duplicateCVData(mockCV, 'Copy', options);
      
      expect(duplicated.contact.email).toBe('');
      expect(duplicated.contact.phone).toBe('');
    });

    it('should reset dates when configured', () => {
      const options = {
        ...DEFAULT_DUPLICATION_OPTIONS,
        resetDates: true,
      };
      
      const duplicated = duplicateCVData(mockCV, 'Copy', options);
      
      expect(duplicated.experience[0].startDate).toBe('');
      expect(duplicated.experience[0].endDate).toBe('');
    });

    it('should anonymize data when configured', () => {
      const options = {
        ...DEFAULT_DUPLICATION_OPTIONS,
        anonymize: true,
      };
      
      const duplicated = duplicateCVData(mockCV, 'Copy', options);
      
      expect(duplicated.contact.name).toBe('Anonymous Professional');
      expect(duplicated.contact.email).toBe('email@example.com');
      expect(duplicated.experience[0].company).toMatch(/Company \d+/);
    });

    it('should remove sections when configured', () => {
      const options = {
        ...DEFAULT_DUPLICATION_OPTIONS,
        includePersonalProjects: false,
        includeVolunteerWork: false,
      };
      
      const duplicated = duplicateCVData(mockCV, 'Copy', options);
      
      expect(duplicated.projects).toHaveLength(0);
      expect(duplicated.volunteerWork).toHaveLength(0);
    });
  });

  describe('getDuplicationOptionsForStrategy', () => {
    it('should return correct options for exact copy', () => {
      const options = getDuplicationOptionsForStrategy(DuplicationStrategy.EXACT_COPY);
      expect(options).toEqual(DEFAULT_DUPLICATION_OPTIONS);
    });

    it('should return correct options for template only', () => {
      const options = getDuplicationOptionsForStrategy(DuplicationStrategy.TEMPLATE_ONLY);
      expect(options.includeSensitiveData).toBe(false);
      expect(options.resetDates).toBe(true);
    });

    it('should return correct options for anonymized', () => {
      const options = getDuplicationOptionsForStrategy(DuplicationStrategy.ANONYMIZED);
      expect(options.anonymize).toBe(true);
    });
  });

  describe('bulkDuplicateCV', () => {
    it('should create multiple variations', () => {
      const request = {
        baseCV: mockCV,
        variations: [
          { name: 'Copy 1', strategy: DuplicationStrategy.EXACT_COPY },
          { name: 'Copy 2', strategy: DuplicationStrategy.ANONYMIZED },
          { name: 'Copy 3', strategy: DuplicationStrategy.TEMPLATE_ONLY },
        ],
      };
      
      const results = bulkDuplicateCV(request);
      
      expect(results).toHaveLength(3);
      expect(results[0].name).toBe('Copy 1');
      expect(results[1].contact.name).toBe('Anonymous Professional');
      expect(results[2].contact.email).toBe('');
    });
  });

  describe('duplicateForRole', () => {
    it('should create role-specific duplicate', () => {
      const config = {
        targetRole: 'Frontend Developer',
        targetIndustry: 'Technology',
        emphasizeSkills: ['React', 'JavaScript'],
        deemphasizeSkills: ['Backend'],
        includeProjects: true,
        includeVolunteerWork: false,
      };
      
      mockCV.skills = ['JavaScript', 'React', 'Backend', 'Python'];
      
      const duplicated = duplicateForRole(mockCV, 'Frontend Resume', config);
      
      expect(duplicated.name).toBe('Frontend Resume');
      expect(duplicated.skills).toContain('React');
      expect(duplicated.skills).toContain('JavaScript');
      expect(duplicated.skills).not.toContain('Backend');
      expect(duplicated.volunteerWork).toHaveLength(0);
      expect(duplicated.metadata?.targetRole).toBe('Frontend Developer');
    });
  });

  describe('validateDuplication', () => {
    it('should validate successful duplication', () => {
      const duplicated = duplicateCVData(mockCV, 'Valid Copy');
      const result = validateDuplication(mockCV, duplicated, DEFAULT_DUPLICATION_OPTIONS);
      
      expect(result.isValid).toBe(true);
      expect(result.errors).toHaveLength(0);
    });

    it('should detect validation issues', () => {
      const duplicated = duplicateCVData(mockCV, 'Original CV'); // Same name
      const result = validateDuplication(mockCV, duplicated, DEFAULT_DUPLICATION_OPTIONS);
      
      expect(result.warnings).toContain('Duplicated CV has the same name as original');
    });
  });

  describe('generateDuplicationSummary', () => {
    it('should generate accurate summary', () => {
      const options = {
        ...DEFAULT_DUPLICATION_OPTIONS,
        includePersonalProjects: false,
        anonymize: true,
      };
      
      const duplicated = duplicateCVData(mockCV, 'Copy', options);
      const summary = generateDuplicationSummary(mockCV, duplicated, options);
      
      expect(summary.originalSections).toBeGreaterThan(0);
      expect(summary.duplicatedSections).toBeGreaterThan(0);
      expect(summary.modifiedData).toContain('Contact Information');
      expect(summary.removedData).toContain('Personal Projects');
    });
  });
});